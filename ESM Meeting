June 10 2025:

EPIC0021404 - Update index on cmdb_rel_ci (ServiceNow Recommendation KB1703367)

KB1703367

Servicenow Index:

A database index is a short cut way that helps the system find rows faster when the table is queried/filtered.

What happens if the index is not being used?
ServiceNow will take an approach to scan every row in the table called table scan - especially for big tables like CI relationship table

What they do?
Speed up queries in GLideRecord, filters, reports or in list views
Improve performance on scripts,business rules and API’s
Help with joins in complex reports or service mapping
Reports - basically used to calculate metrics to show in dashboards
Service Mappings - mapping the application dependencies in the CMDB

Why in complex reports?
To pull related information from CI’s, CI relationship and tickets

Why in service mapping?
To find and visualize all dependant CI’s in a service(Service Configuration Item Associations related with Application service table)

What was changed?

On upgrade to Yokohoma, three new compound indexes are added to cmdb_rel_ci table 
1) parent, type
2) child, type
3) child, parent, type, port

What is the impact?

Initial upgrade testing conducted on an instance populated with 202 million cmdb_ci records has provided concrete evidence of this issue. The process of creating all necessary indexes on such a large dataset was observed to take approximately 3 hours and 20 minutes. This lengthy duration highlights the potential for extended upgrade windows and the need for optimization strategies to mitigate the impact on customer operations.

Why did upgrade time increase?
Database engine needs to scan and rebuild the index across all rows and this is going to be resource intensive and takes time, so the upgrade waits until the operation completes

Before upgrade applying the index script it is going to reduce the time Yokohoma upgrade time

Demo:
// Test Index 2: child, type
gs.info('--- Testing index: child, type ---');

var start = new Date().getTime();

var gr2 = new GlideRecord('cmdb_rel_ci');
gr2.addQuery('child', 'fc631c2c97e12ed0826673f11153aff4'); // replace with actual sys_id
gr2.addQuery('type', '41008aa6ef32010098d5925495c0fb94'); // same type or different
gr2.query();
while (gr2.next()) {
    //gs.info('Match (child, type): ' + gr2.sys_id);
}

var end = new Date().getTime();
gs.info('Query duration (ms): ' + (end - start));

//child=fc631c2c97e12ed0826673f11153aff4^type=41008aa6ef32010098d5925495c0fb94

Interpretations:
Fast (< 100 ms) on large data → Index used 
Slow (> 100 ms) or keep growing with the record count → Index not used
------------------------------------------------------------------------------------------------------------------------------------------

EPIC0021334 - Remove duplicate ITAM servers by name
To allow for a mature CMDB including ServiceNow Discovery, the ITAM source should be processing unique server records by name. Next step to prepare for this is to remove the duplicate servers by name from existing CMDB tables.

To achieve this created a script

1. Identification
- Discovery Source = ITAM
- Class is Server but NOT IBM Mainframe, IBM Mainframe LPAR, IBM Mainframe Linux, Server Chassis
    (Class Is: AIX Server, ESX Server, HPUX Server, Linux Server, Server, Solaris Server, Windows Server)
- More than 1 record by Name

For each set by Name:

2. Primary Record
- Identify primary record as last touched [most recent Updated time stamp]

3. Reference to Task
- All other records, identify if referenced on key table TASK_CI or TASK
- IF reference exists, need to update to sys_id of primary record

4. Mark for deletion
- Mark duplicate record by setting attribute column to: DELETE
- Table Cleaner job will remove duplicate record


code:
executeRule();


function executeRule() {

    var nameToPrimary = {};
    var batchSize = 10000;
    var count = 0;
    var duplicateProcessed = 0;

    //gs.info('[CMDB Cleanup Job] Deduplicate Servers & Update Task References::: Starting duplicate cleanup job...');

    try {
        //Get the all relevant server records
        var query = 'discovery_source=ITAM^sys_class_nameINcmdb_ci_aix_server,cmdb_ci_esx_server,cmdb_ci_hpux_server,cmdb_ci_linux_server,cmdb_ci_server,cmdb_ci_solaris_server,cmdb_ci_win_server^attributes!=DELETE^ORattributesISEMPTY';
        var serverGr = new GlideRecord('cmdb_ci_server');
        serverGr.addEncodedQuery(query);
        serverGr.orderBy('name');
        serverGr.orderByDesc('sys_updated_on');
        //serverGr.setLimit(batchSize);
        serverGr.query();

        while (serverGr.next() && count < batchSize) {

            var name = serverGr.name.toString();

            //Go to the next iteration if the name is empty
            if (!name) {
                continue;
            }

            //Go to the next iterations if the primary server ia found and appened in the object
            if (!nameToPrimary[name]) {
                nameToPrimary[name] = serverGr.sys_id.toString();
                //gs.info('ARK:::[CMDB Cleanup Job] Primary record for "' + name + '": ' + serverGr.sys_id);
                continue;
            }

            var duplicateSysId = serverGr.sys_id.toString();
            var primarySysId = nameToPrimary[name];

            // update task_ci references by finding the duplicates CI's and updating with primmary CI server
            var taskCiGr = new GlideRecord('task_ci');
            taskCiGr.addQuery('ci_item', duplicateSysId);
            taskCiGr.query();
            while (taskCiGr.next()) {
                var taskSysId = taskCiGr.sys_id.toString();
                taskCiGr.setWorkflow(false);
                taskCiGr.autoSysFields(false);
                taskCiGr.ci_item = primarySysId;
                taskCiGr.update();
            }

            //Mark the duplicate for the deletion in the attributes column
            serverGr.setWorkflow(false);
            serverGr.autoSysFields(false);
            serverGr.attributes = 'DELETE';
            serverGr.update();

            //Increase the count value to update the record in batch wise
            count++;
            duplicateProcessed++;
        }
        gs.info('[CMDB Cleanup Job] Cleanup complete. Duplicates processed: ' + duplicateProcessed);


    } catch (globalErr) {
        gs.error('[CMDB Cleanup] Deduplicate Servers & Update Task References.Fatal error: ' + globalErr.message);

    }
}


-------------------------------------------------------------------

An index is like a shortcut in a database that helps ServiceNow quickly find records without scanning the entire table. This is especially critical for large tables like cmdb_rel_ci, which can have millions of rows.

Without an index, ServiceNow will do a full table scan, which is slow and resource-heavy.


During the Yokohama upgrade, if these indexes are created on-the-fly:
	•	The database engine needs to scan all rows to build the index
	•	Example: For 202 million rows, index creation took 3 hours 20 minutes
	•	This increases upgrade window duration and delays go-live


🧩 Summary Talking Points for Director
	•	ServiceNow recommends adding 3 compound indexes on cmdb_rel_ci table.
	•	This improves performance for critical modules like CMDB, Service Mapping, Reports, and APIs.
	•	Without these indexes, large-scale data queries can cause slowness and degrade user experience.
	•	Applying them before the Yokohama upgrade avoids long upgrade windows.
	•	This aligns with ServiceNow best practices (KB1703367), especially for high-volume CMDB environments.


-------------------------------

To clean up duplicate server records (from ITAM source) in the CMDB, ensuring data accuracy, and paving the way for reliable Discovery and Service Mapping in a mature CMDB model.

⸻

🧩 Why This is Important

Duplicate CI records (Configuration Items) in CMDB:
	•	Lead to confusion in incident/change/problem records
	•	Cause inaccurate dependency maps in Service Mapping
	•	Increase maintenance effort and inconsistency across modules
	•	Block reconciliation and normalization for Discovery and ITOM

This effort prepares the CMDB for clean ingestion from ServiceNow Discovery by removing ITAM-based duplicates.


🔁 End-to-End Flow Summary

Step
Description
Outcome
1️⃣
Identify duplicates by name, filtered by class and source
Clean target scope
2️⃣
Pick primary (most recent update)
Establish reliable record
3️⃣
Update all task references to primary
Avoid broken links in ITSM
4️⃣
Set attribute = DELETE for duplicates
Mark for safe removal
🔁
Table Cleaner removes them
Final cleanup


✅ Ready-to-Use Talking Points for Director
	•	We’re eliminating duplicate ITAM servers to stabilize the CMDB and prepare for Discovery integration.
	•	This improves data quality, reduces incident misrouting, and aligns with CMDB governance.
	•	We’re ensuring referential integrity before deletion — no impact on task history.
	•	Duplicate CIs are only flagged, and deleted later using the Table Cleaner job (standard platform feature).
	•	This supports our ITOM roadmap and data compliance efforts.



















